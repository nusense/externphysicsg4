////////////////////////////////////////////////////////////////////////
// Class:       ExternPhysicsG4
// Module Type: producer
// File:        ExternPhysicsG4_module.cc
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>
#include <iostream>
#include <iomanip>

namespace extg4 {

  class ExternPhysicsG4 : public art::EDProducer {
  public:
    explicit ExternPhysicsG4(fhicl::ParameterSet const & p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.

    // Plugins should not be copied or assigned.
    ExternPhysicsG4(ExternPhysicsG4 const &) = delete;
    ExternPhysicsG4(ExternPhysicsG4 &&) = delete;
    ExternPhysicsG4 & operator = (ExternPhysicsG4 const &) = delete;
    ExternPhysicsG4 & operator = (ExternPhysicsG4 &&) = delete;

  private:
    // Required functions.
    void produce(art::Event & e) override;

    //Optional functions.
    void endJob() override;
    std::string fGenieModuleLabel;
  };

  ExternPhysicsG4::ExternPhysicsG4(fhicl::ParameterSet const & p)
    : EDProducer{p}
  {
    produces<std::vector<std::string> >();
  }

  void ExternPhysicsG4::produce(art::Event & e)
  {
    // Implementation of required member function here.
    auto vec = std::make_unique<std::vector<std::string>>();

    vec->push_back("ExternPhysicsG4");

    e.put(std::move(vec));
  }

  void ExternPhysicsG4::endJob()
  {
  }

} // namespace

DEFINE_ART_MODULE(extg4::ExternPhysicsG4)
